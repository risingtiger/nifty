(()=>{var namespaces={svg:"http://www.w3.org/2000/svg",xmlns:"http://www.w3.org/2000/xmlns/",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",ct:"http://gionkunz.github.com/chartist-js/ct"};var precision=8;var escapingMap={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"};function ensureUnit(value,unit){if(typeof value==="number"){return value+unit}return value}function quantity(input){if(typeof input==="string"){const match=/^(\d+)\s*(.*)$/g.exec(input);return{value:match?+match[1]:0,unit:(match===null||match===void 0?void 0:match[2])||void 0}}return{value:Number(input)}}function alphaNumerate(n){return String.fromCharCode(97+n%26)}var EPSILON=2221e-19;function orderOfMagnitude(value){return Math.floor(Math.log(Math.abs(value))/Math.LN10)}function projectLength(axisLength,length,bounds){return length/bounds.range*axisLength}function roundWithPrecision(value,digits){const precision$1=Math.pow(10,digits||precision);return Math.round(value*precision$1)/precision$1}function rho(num){if(num===1){return num}function gcd(p,q){if(p%q===0){return q}else{return gcd(q,p%q)}}function f(x){return x*x+1}let x1=2;let x2=2;let divisor;if(num%2===0){return 2}do{x1=f(x1)%num;x2=f(f(x2))%num;divisor=gcd(Math.abs(x1-x2),num)}while(divisor===1);return divisor}function getBounds(axisLength,highLow,scaleMinSpace){let onlyInteger=arguments.length>3&&arguments[3]!==void 0?arguments[3]:false;const bounds={high:highLow.high,low:highLow.low,valueRange:0,oom:0,step:0,min:0,max:0,range:0,numberOfSteps:0,values:[]};bounds.valueRange=bounds.high-bounds.low;bounds.oom=orderOfMagnitude(bounds.valueRange);bounds.step=Math.pow(10,bounds.oom);bounds.min=Math.floor(bounds.low/bounds.step)*bounds.step;bounds.max=Math.ceil(bounds.high/bounds.step)*bounds.step;bounds.range=bounds.max-bounds.min;bounds.numberOfSteps=Math.round(bounds.range/bounds.step);const length=projectLength(axisLength,bounds.step,bounds);const scaleUp=length<scaleMinSpace;const smallestFactor=onlyInteger?rho(bounds.range):0;if(onlyInteger&&projectLength(axisLength,1,bounds)>=scaleMinSpace){bounds.step=1}else if(onlyInteger&&smallestFactor<bounds.step&&projectLength(axisLength,smallestFactor,bounds)>=scaleMinSpace){bounds.step=smallestFactor}else{let optimizationCounter=0;for(;;){if(scaleUp&&projectLength(axisLength,bounds.step,bounds)<=scaleMinSpace){bounds.step*=2}else if(!scaleUp&&projectLength(axisLength,bounds.step/2,bounds)>=scaleMinSpace){bounds.step/=2;if(onlyInteger&&bounds.step%1!==0){bounds.step*=2;break}}else{break}if(optimizationCounter++>1e3){throw new Error("Exceeded maximum number of iterations while optimizing scale step!")}}}bounds.step=Math.max(bounds.step,EPSILON);function safeIncrement(value,increment){if(value===(value+=increment)){value*=1+(increment>0?EPSILON:-EPSILON)}return value}let newMin=bounds.min;let newMax=bounds.max;while(newMin+bounds.step<=bounds.low){newMin=safeIncrement(newMin,bounds.step)}while(newMax-bounds.step>=bounds.high){newMax=safeIncrement(newMax,-bounds.step)}bounds.min=newMin;bounds.max=newMax;bounds.range=bounds.max-bounds.min;const values=[];for(let i=bounds.min;i<=bounds.max;i=safeIncrement(i,bounds.step)){const value=roundWithPrecision(i);if(value!==values[values.length-1]){values.push(value)}}bounds.values=values;return bounds}function extend(){let target=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};for(var _len=arguments.length,sources=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){sources[_key-1]=arguments[_key]}for(let i=0;i<sources.length;i++){const source=sources[i];for(const prop in source){const sourceProp=source[prop];if(typeof sourceProp==="object"&&sourceProp!==null&&!(sourceProp instanceof Array)){target[prop]=extend(target[prop],sourceProp)}else{target[prop]=sourceProp}}}return target}var noop=n=>n;function times(length,filler){return Array.from({length:length},filler?(_,i)=>filler(i):()=>void 0)}var serialMap=(array,callback)=>times(Math.max(...array.map(element2=>element2.length)),index=>callback(...array.map(element2=>element2[index])));function safeHasProperty(target,property){return target!==null&&typeof target==="object"&&Reflect.has(target,property)}function isNumeric(value){return value!==null&&isFinite(value)}function isFalseyButZero(value){return!value&&value!==0}function getNumberOrUndefined(value){return isNumeric(value)?Number(value):void 0}function isArrayOfArrays(data){if(!Array.isArray(data)){return false}return data.every(Array.isArray)}function each(list,callback){let reverse=arguments.length>2&&arguments[2]!==void 0?arguments[2]:false;let index=0;list[reverse?"reduceRight":"reduce"]((_,item,itemIndex)=>callback(item,index++,itemIndex),void 0)}function getMetaData(seriesData,index){const value=Array.isArray(seriesData)?seriesData[index]:safeHasProperty(seriesData,"data")?seriesData.data[index]:null;return safeHasProperty(value,"meta")?value.meta:void 0}function isDataHoleValue(value){return value===null||value===void 0||typeof value==="number"&&isNaN(value)}function isArrayOfSeries(value){return Array.isArray(value)&&value.every(_=>Array.isArray(_)||safeHasProperty(_,"data"))}function isMultiValue(value){return typeof value==="object"&&value!==null&&(Reflect.has(value,"x")||Reflect.has(value,"y"))}function getMultiValue(value){let dimension=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"y";if(isMultiValue(value)&&safeHasProperty(value,dimension)){return getNumberOrUndefined(value[dimension])}else{return getNumberOrUndefined(value)}}function getHighLow(data,options,dimension){options={...options,...dimension?dimension==="x"?options.axisX:options.axisY:{}};const highLow={high:options.high===void 0?-Number.MAX_VALUE:+options.high,low:options.low===void 0?Number.MAX_VALUE:+options.low};const findHigh=options.high===void 0;const findLow=options.low===void 0;function recursiveHighLow(sourceData){if(isDataHoleValue(sourceData)){return}else if(Array.isArray(sourceData)){for(let i=0;i<sourceData.length;i++){recursiveHighLow(sourceData[i])}}else{const value=Number(dimension&&safeHasProperty(sourceData,dimension)?sourceData[dimension]:sourceData);if(findHigh&&value>highLow.high){highLow.high=value}if(findLow&&value<highLow.low){highLow.low=value}}}if(findHigh||findLow){recursiveHighLow(data)}if(options.referenceValue||options.referenceValue===0){highLow.high=Math.max(options.referenceValue,highLow.high);highLow.low=Math.min(options.referenceValue,highLow.low)}if(highLow.high<=highLow.low){if(highLow.low===0){highLow.high=1}else if(highLow.low<0){highLow.high=0}else if(highLow.high>0){highLow.low=0}else{highLow.high=1;highLow.low=0}}return highLow}function normalizeData(data){let reverse=arguments.length>1&&arguments[1]!==void 0?arguments[1]:false,multi=arguments.length>2?arguments[2]:void 0,distributed=arguments.length>3?arguments[3]:void 0;let labelCount;const normalized={labels:(data.labels||[]).slice(),series:normalizeSeries(data.series,multi,distributed)};const inputLabelCount=normalized.labels.length;if(isArrayOfArrays(normalized.series)){labelCount=Math.max(inputLabelCount,...normalized.series.map(series=>series.length));normalized.series.forEach(series=>{series.push(...times(Math.max(0,labelCount-series.length)))})}else{labelCount=normalized.series.length}normalized.labels.push(...times(Math.max(0,labelCount-inputLabelCount),()=>""));if(reverse){reverseData(normalized)}return normalized}function reverseData(data){var ref;(ref=data.labels)===null||ref===void 0?void 0:ref.reverse();data.series.reverse();for(const series of data.series){if(safeHasProperty(series,"data")){series.data.reverse()}else if(Array.isArray(series)){series.reverse()}}}function normalizeMulti(value,multi){let x;let y;if(typeof value!=="object"){const num=getNumberOrUndefined(value);if(multi==="x"){x=num}else{y=num}}else{if(safeHasProperty(value,"x")){x=getNumberOrUndefined(value.x)}if(safeHasProperty(value,"y")){y=getNumberOrUndefined(value.y)}}if(x===void 0&&y===void 0){return void 0}return{x:x,y:y}}function normalizePrimitive(value,multi){if(isDataHoleValue(value)){return void 0}if(multi){return normalizeMulti(value,multi)}return getNumberOrUndefined(value)}function normalizeSingleSeries(series,multi){if(!Array.isArray(series)){return normalizeSingleSeries(series.data,multi)}return series.map(value=>{if(safeHasProperty(value,"value")){return normalizePrimitive(value.value,multi)}return normalizePrimitive(value,multi)})}function normalizeSeries(series,multi,distributed){if(isArrayOfSeries(series)){return series.map(_=>normalizeSingleSeries(_,multi))}const normalizedSeries=normalizeSingleSeries(series,multi);if(distributed){return normalizedSeries.map(value=>[value])}return normalizedSeries}function splitIntoSegments(pathCoordinates,valueData,options){const finalOptions={increasingX:false,fillHoles:false,...options};const segments=[];let hole=true;for(let i=0;i<pathCoordinates.length;i+=2){if(getMultiValue(valueData[i/2].value)===void 0){if(!finalOptions.fillHoles){hole=true}}else{if(finalOptions.increasingX&&i>=2&&pathCoordinates[i]<=pathCoordinates[i-2]){hole=true}if(hole){segments.push({pathCoordinates:[],valueData:[]});hole=false}segments[segments.length-1].pathCoordinates.push(pathCoordinates[i],pathCoordinates[i+1]);segments[segments.length-1].valueData.push(valueData[i/2])}}return segments}function serialize(data){let serialized="";if(data===null||data===void 0){return data}else if(typeof data==="number"){serialized=""+data}else if(typeof data==="object"){serialized=JSON.stringify({data:data})}else{serialized=String(data)}return Object.keys(escapingMap).reduce((result,key)=>result.replaceAll(key,escapingMap[key]),serialized)}var SvgList=class{call(method,args){this.svgElements.forEach(element2=>Reflect.apply(element2[method],element2,args));return this}attr(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("attr",args)}elem(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("elem",args)}root(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("root",args)}getNode(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("getNode",args)}foreignObject(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("foreignObject",args)}text(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("text",args)}empty(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("empty",args)}remove(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("remove",args)}addClass(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("addClass",args)}removeClass(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("removeClass",args)}removeAllClasses(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("removeAllClasses",args)}animate(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return this.call("animate",args)}constructor(nodeList){this.svgElements=[];for(let i=0;i<nodeList.length;i++){this.svgElements.push(new Svg(nodeList[i]))}}};var easings={easeInSine:[.47,0,.745,.715],easeOutSine:[.39,.575,.565,1],easeInOutSine:[.445,.05,.55,.95],easeInQuad:[.55,.085,.68,.53],easeOutQuad:[.25,.46,.45,.94],easeInOutQuad:[.455,.03,.515,.955],easeInCubic:[.55,.055,.675,.19],easeOutCubic:[.215,.61,.355,1],easeInOutCubic:[.645,.045,.355,1],easeInQuart:[.895,.03,.685,.22],easeOutQuart:[.165,.84,.44,1],easeInOutQuart:[.77,0,.175,1],easeInQuint:[.755,.05,.855,.06],easeOutQuint:[.23,1,.32,1],easeInOutQuint:[.86,0,.07,1],easeInExpo:[.95,.05,.795,.035],easeOutExpo:[.19,1,.22,1],easeInOutExpo:[1,0,0,1],easeInCirc:[.6,.04,.98,.335],easeOutCirc:[.075,.82,.165,1],easeInOutCirc:[.785,.135,.15,.86],easeInBack:[.6,-.28,.735,.045],easeOutBack:[.175,.885,.32,1.275],easeInOutBack:[.68,-.55,.265,1.55]};function createAnimation(element2,attribute,animationDefinition){let createGuided=arguments.length>3&&arguments[3]!==void 0?arguments[3]:false,eventEmitter=arguments.length>4?arguments[4]:void 0;const{easing,...def}=animationDefinition;const attributeProperties={};let animationEasing;let timeout;if(easing){animationEasing=Array.isArray(easing)?easing:easings[easing]}def.begin=ensureUnit(def.begin,"ms");def.dur=ensureUnit(def.dur,"ms");if(animationEasing){def.calcMode="spline";def.keySplines=animationEasing.join(" ");def.keyTimes="0;1"}if(createGuided){def.fill="freeze";attributeProperties[attribute]=def.from;element2.attr(attributeProperties);timeout=quantity(def.begin||0).value;def.begin="indefinite"}const animate=element2.elem("animate",{attributeName:attribute,...def});if(createGuided){setTimeout(()=>{try{animate._node.beginElement()}catch(err){attributeProperties[attribute]=def.to;element2.attr(attributeProperties);animate.remove()}},timeout)}const animateNode=animate.getNode();if(eventEmitter){animateNode.addEventListener("beginEvent",()=>eventEmitter.emit("animationBegin",{element:element2,animate:animateNode,params:animationDefinition}))}animateNode.addEventListener("endEvent",()=>{if(eventEmitter){eventEmitter.emit("animationEnd",{element:element2,animate:animateNode,params:animationDefinition})}if(createGuided){attributeProperties[attribute]=def.to;element2.attr(attributeProperties);animate.remove()}})}var Svg=class _Svg{attr(attributes,ns){if(typeof attributes==="string"){if(ns){return this._node.getAttributeNS(ns,attributes)}else{return this._node.getAttribute(attributes)}}Object.keys(attributes).forEach(key=>{if(attributes[key]===void 0){return}if(key.indexOf(":")!==-1){const namespacedAttribute=key.split(":");this._node.setAttributeNS(namespaces[namespacedAttribute[0]],key,String(attributes[key]))}else{this._node.setAttribute(key,String(attributes[key]))}});return this}elem(name,attributes,className){let insertFirst=arguments.length>3&&arguments[3]!==void 0?arguments[3]:false;return new _Svg(name,attributes,className,this,insertFirst)}parent(){return this._node.parentNode instanceof SVGElement?new _Svg(this._node.parentNode):null}root(){let node=this._node;while(node.nodeName!=="svg"){if(node.parentElement){node=node.parentElement}else{break}}return new _Svg(node)}querySelector(selector){const foundNode=this._node.querySelector(selector);return foundNode?new _Svg(foundNode):null}querySelectorAll(selector){const foundNodes=this._node.querySelectorAll(selector);return new SvgList(foundNodes)}getNode(){return this._node}foreignObject(content,attributes,className){let insertFirst=arguments.length>3&&arguments[3]!==void 0?arguments[3]:false;let contentNode;if(typeof content==="string"){const container=document.createElement("div");container.innerHTML=content;contentNode=container.firstChild}else{contentNode=content}if(contentNode instanceof Element){contentNode.setAttribute("xmlns",namespaces.xmlns)}const fnObj=this.elem("foreignObject",attributes,className,insertFirst);fnObj._node.appendChild(contentNode);return fnObj}text(t){this._node.appendChild(document.createTextNode(t));return this}empty(){while(this._node.firstChild){this._node.removeChild(this._node.firstChild)}return this}remove(){var ref;(ref=this._node.parentNode)===null||ref===void 0?void 0:ref.removeChild(this._node);return this.parent()}replace(newElement){var ref;(ref=this._node.parentNode)===null||ref===void 0?void 0:ref.replaceChild(newElement._node,this._node);return newElement}append(element2){let insertFirst=arguments.length>1&&arguments[1]!==void 0?arguments[1]:false;if(insertFirst&&this._node.firstChild){this._node.insertBefore(element2._node,this._node.firstChild)}else{this._node.appendChild(element2._node)}return this}classes(){const classNames=this._node.getAttribute("class");return classNames?classNames.trim().split(/\s+/):[]}addClass(names){this._node.setAttribute("class",this.classes().concat(names.trim().split(/\s+/)).filter(function(elem,pos,self){return self.indexOf(elem)===pos}).join(" "));return this}removeClass(names){const removedClasses=names.trim().split(/\s+/);this._node.setAttribute("class",this.classes().filter(name=>removedClasses.indexOf(name)===-1).join(" "));return this}removeAllClasses(){this._node.setAttribute("class","");return this}height(){return this._node.getBoundingClientRect().height}width(){return this._node.getBoundingClientRect().width}animate(animations){let guided=arguments.length>1&&arguments[1]!==void 0?arguments[1]:true,eventEmitter=arguments.length>2?arguments[2]:void 0;Object.keys(animations).forEach(attribute=>{const attributeAnimation=animations[attribute];if(Array.isArray(attributeAnimation)){attributeAnimation.forEach(animationDefinition=>createAnimation(this,attribute,animationDefinition,false,eventEmitter))}else{createAnimation(this,attribute,attributeAnimation,guided,eventEmitter)}});return this}constructor(name,attributes,className,parent,insertFirst=false){if(name instanceof Element){this._node=name}else{this._node=document.createElementNS(namespaces.svg,name);if(name==="svg"){this.attr({"xmlns:ct":namespaces.ct})}}if(attributes){this.attr(attributes)}if(className){this.addClass(className)}if(parent){if(insertFirst&&parent._node.firstChild){parent._node.insertBefore(this._node,parent._node.firstChild)}else{parent._node.appendChild(this._node)}}}};Svg.Easing=easings;function createSvg(container){let width=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"100%",height=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"100%",className=arguments.length>3?arguments[3]:void 0;Array.from(container.querySelectorAll("svg")).filter(svg=>svg.getAttributeNS(namespaces.xmlns,"ct")).forEach(svg=>container.removeChild(svg));const svg1=new Svg("svg").attr({width:width,height:height}).attr({style:"width: ".concat(width,"; height: ").concat(height,";")});if(className){svg1.addClass(className)}container.appendChild(svg1.getNode());return svg1}function normalizePadding(padding){return typeof padding==="number"?{top:padding,right:padding,bottom:padding,left:padding}:padding===void 0?{top:0,right:0,bottom:0,left:0}:{top:typeof padding.top==="number"?padding.top:0,right:typeof padding.right==="number"?padding.right:0,bottom:typeof padding.bottom==="number"?padding.bottom:0,left:typeof padding.left==="number"?padding.left:0}}function createChartRect(svg,options){var ref,ref1,ref2,ref3;const hasAxis=Boolean(options.axisX||options.axisY);const yAxisOffset=((ref=options.axisY)===null||ref===void 0?void 0:ref.offset)||0;const xAxisOffset=((ref1=options.axisX)===null||ref1===void 0?void 0:ref1.offset)||0;const yAxisPosition=(ref2=options.axisY)===null||ref2===void 0?void 0:ref2.position;const xAxisPosition=(ref3=options.axisX)===null||ref3===void 0?void 0:ref3.position;let width=svg.width()||quantity(options.width).value||0;let height=svg.height()||quantity(options.height).value||0;const normalizedPadding=normalizePadding(options.chartPadding);width=Math.max(width,yAxisOffset+normalizedPadding.left+normalizedPadding.right);height=Math.max(height,xAxisOffset+normalizedPadding.top+normalizedPadding.bottom);const chartRect={x1:0,x2:0,y1:0,y2:0,padding:normalizedPadding,width(){return this.x2-this.x1},height(){return this.y1-this.y2}};if(hasAxis){if(xAxisPosition==="start"){chartRect.y2=normalizedPadding.top+xAxisOffset;chartRect.y1=Math.max(height-normalizedPadding.bottom,chartRect.y2+1)}else{chartRect.y2=normalizedPadding.top;chartRect.y1=Math.max(height-normalizedPadding.bottom-xAxisOffset,chartRect.y2+1)}if(yAxisPosition==="start"){chartRect.x1=normalizedPadding.left+yAxisOffset;chartRect.x2=Math.max(width-normalizedPadding.right,chartRect.x1+1)}else{chartRect.x1=normalizedPadding.left;chartRect.x2=Math.max(width-normalizedPadding.right-yAxisOffset,chartRect.x1+1)}}else{chartRect.x1=normalizedPadding.left;chartRect.x2=Math.max(width-normalizedPadding.right,chartRect.x1+1);chartRect.y2=normalizedPadding.top;chartRect.y1=Math.max(height-normalizedPadding.bottom,chartRect.y2+1)}return chartRect}function createGrid(position,index,axis,offset,length,group,classes,eventEmitter){const positionalData={["".concat(axis.units.pos,"1")]:position,["".concat(axis.units.pos,"2")]:position,["".concat(axis.counterUnits.pos,"1")]:offset,["".concat(axis.counterUnits.pos,"2")]:offset+length};const gridElement=group.elem("line",positionalData,classes.join(" "));eventEmitter.emit("draw",{type:"grid",axis:axis,index:index,group:group,element:gridElement,...positionalData})}function createGridBackground(gridGroup,chartRect,className,eventEmitter){const gridBackground=gridGroup.elem("rect",{x:chartRect.x1,y:chartRect.y2,width:chartRect.width(),height:chartRect.height()},className,true);eventEmitter.emit("draw",{type:"gridBackground",group:gridGroup,element:gridBackground})}function createLabel(position,length,index,label,axis,axisOffset,labelOffset,group,classes,eventEmitter){const positionalData={[axis.units.pos]:position+labelOffset[axis.units.pos],[axis.counterUnits.pos]:labelOffset[axis.counterUnits.pos],[axis.units.len]:length,[axis.counterUnits.len]:Math.max(0,axisOffset-10)};const stepLength=Math.round(positionalData[axis.units.len]);const stepCounterLength=Math.round(positionalData[axis.counterUnits.len]);const content=document.createElement("span");content.className=classes.join(" ");content.style[axis.units.len]=stepLength+"px";content.style[axis.counterUnits.len]=stepCounterLength+"px";content.textContent=String(label);const labelElement=group.foreignObject(content,{style:"overflow: visible;",...positionalData});eventEmitter.emit("draw",{type:"label",axis:axis,index:index,group:group,element:labelElement,text:label,...positionalData})}function optionsProvider(options,responsiveOptions,eventEmitter){let currentOptions;const mediaQueryListeners=[];function updateCurrentOptions(mediaEvent){const previousOptions=currentOptions;currentOptions=extend({},options);if(responsiveOptions){responsiveOptions.forEach(responsiveOption=>{const mql=window.matchMedia(responsiveOption[0]);if(mql.matches){currentOptions=extend(currentOptions,responsiveOption[1])}})}if(eventEmitter&&mediaEvent){eventEmitter.emit("optionsChanged",{previousOptions:previousOptions,currentOptions:currentOptions})}}function removeMediaQueryListeners(){mediaQueryListeners.forEach(mql=>mql.removeEventListener("change",updateCurrentOptions))}if(!window.matchMedia){throw new Error("window.matchMedia not found! Make sure you're using a polyfill.")}else if(responsiveOptions){responsiveOptions.forEach(responsiveOption=>{const mql=window.matchMedia(responsiveOption[0]);mql.addEventListener("change",updateCurrentOptions);mediaQueryListeners.push(mql)})}updateCurrentOptions();return{removeMediaQueryListeners:removeMediaQueryListeners,getCurrentOptions(){return currentOptions}}}var elementDescriptions={m:["x","y"],l:["x","y"],c:["x1","y1","x2","y2","x","y"],a:["rx","ry","xAr","lAf","sf","x","y"]};var defaultOptions$3={accuracy:3};function element(command,params,pathElements,pos,relative,data){const pathElement={command:relative?command.toLowerCase():command.toUpperCase(),...params,...data?{data:data}:{}};pathElements.splice(pos,0,pathElement)}function forEachParam(pathElements,cb){pathElements.forEach((pathElement,pathElementIndex)=>{elementDescriptions[pathElement.command.toLowerCase()].forEach((paramName,paramIndex)=>{cb(pathElement,paramName,pathElementIndex,paramIndex,pathElements)})})}var SvgPath=class _SvgPath{static join(paths){let close=arguments.length>1&&arguments[1]!==void 0?arguments[1]:false,options=arguments.length>2?arguments[2]:void 0;const joinedPath=new _SvgPath(close,options);for(let i=0;i<paths.length;i++){const path=paths[i];for(let j=0;j<path.pathElements.length;j++){joinedPath.pathElements.push(path.pathElements[j])}}return joinedPath}position(pos){if(pos!==void 0){this.pos=Math.max(0,Math.min(this.pathElements.length,pos));return this}else{return this.pos}}remove(count){this.pathElements.splice(this.pos,count);return this}move(x,y){let relative=arguments.length>2&&arguments[2]!==void 0?arguments[2]:false,data=arguments.length>3?arguments[3]:void 0;element("M",{x:+x,y:+y},this.pathElements,this.pos++,relative,data);return this}line(x,y){let relative=arguments.length>2&&arguments[2]!==void 0?arguments[2]:false,data=arguments.length>3?arguments[3]:void 0;element("L",{x:+x,y:+y},this.pathElements,this.pos++,relative,data);return this}curve(x1,y1,x2,y2,x,y){let relative=arguments.length>6&&arguments[6]!==void 0?arguments[6]:false,data=arguments.length>7?arguments[7]:void 0;element("C",{x1:+x1,y1:+y1,x2:+x2,y2:+y2,x:+x,y:+y},this.pathElements,this.pos++,relative,data);return this}arc(rx,ry,xAr,lAf,sf,x,y){let relative=arguments.length>7&&arguments[7]!==void 0?arguments[7]:false,data=arguments.length>8?arguments[8]:void 0;element("A",{rx:rx,ry:ry,xAr:xAr,lAf:lAf,sf:sf,x:x,y:y},this.pathElements,this.pos++,relative,data);return this}parse(path){const chunks=path.replace(/([A-Za-z])(-?[0-9])/g,"$1 $2").replace(/([0-9])([A-Za-z])/g,"$1 $2").split(/[\s,]+/).reduce((result,pathElement)=>{if(pathElement.match(/[A-Za-z]/)){result.push([])}result[result.length-1].push(pathElement);return result},[]);if(chunks[chunks.length-1][0].toUpperCase()==="Z"){chunks.pop()}const elements=chunks.map(chunk=>{const command=chunk.shift();const description=elementDescriptions[command.toLowerCase()];return{command:command,...description.reduce((result,paramName,index)=>{result[paramName]=+chunk[index];return result},{})}});this.pathElements.splice(this.pos,0,...elements);this.pos+=elements.length;return this}stringify(){const accuracyMultiplier=Math.pow(10,this.options.accuracy);return this.pathElements.reduce((path,pathElement)=>{const params=elementDescriptions[pathElement.command.toLowerCase()].map(paramName=>{const value=pathElement[paramName];return this.options.accuracy?Math.round(value*accuracyMultiplier)/accuracyMultiplier:value});return path+pathElement.command+params.join(",")},"")+(this.close?"Z":"")}scale(x,y){forEachParam(this.pathElements,(pathElement,paramName)=>{pathElement[paramName]*=paramName[0]==="x"?x:y});return this}translate(x,y){forEachParam(this.pathElements,(pathElement,paramName)=>{pathElement[paramName]+=paramName[0]==="x"?x:y});return this}transform(transformFnc){forEachParam(this.pathElements,(pathElement,paramName,pathElementIndex,paramIndex,pathElements)=>{const transformed=transformFnc(pathElement,paramName,pathElementIndex,paramIndex,pathElements);if(transformed||transformed===0){pathElement[paramName]=transformed}});return this}clone(){let close=arguments.length>0&&arguments[0]!==void 0?arguments[0]:false;const clone=new _SvgPath(close||this.close);clone.pos=this.pos;clone.pathElements=this.pathElements.slice().map(pathElement=>({...pathElement}));clone.options={...this.options};return clone}splitByCommand(command){const split=[new _SvgPath];this.pathElements.forEach(pathElement=>{if(pathElement.command===command.toUpperCase()&&split[split.length-1].pathElements.length!==0){split.push(new _SvgPath)}split[split.length-1].pathElements.push(pathElement)});return split}constructor(close=false,options){this.close=close;this.pathElements=[];this.pos=0;this.options={...defaultOptions$3,...options}}};function none(options){const finalOptions={fillHoles:false,...options};return function noneInterpolation(pathCoordinates,valueData){const path=new SvgPath;let hole=true;for(let i=0;i<pathCoordinates.length;i+=2){const currX=pathCoordinates[i];const currY=pathCoordinates[i+1];const currData=valueData[i/2];if(getMultiValue(currData.value)!==void 0){if(hole){path.move(currX,currY,false,currData)}else{path.line(currX,currY,false,currData)}hole=false}else if(!finalOptions.fillHoles){hole=true}}return path}}function monotoneCubic(options){const finalOptions={fillHoles:false,...options};return function monotoneCubicInterpolation(pathCoordinates,valueData){const segments=splitIntoSegments(pathCoordinates,valueData,{fillHoles:finalOptions.fillHoles,increasingX:true});if(!segments.length){return none()([],[])}else if(segments.length>1){return SvgPath.join(segments.map(segment=>monotoneCubicInterpolation(segment.pathCoordinates,segment.valueData)))}else{pathCoordinates=segments[0].pathCoordinates;valueData=segments[0].valueData;if(pathCoordinates.length<=4){return none()(pathCoordinates,valueData)}const xs=[];const ys=[];const n=pathCoordinates.length/2;const ms=[];const ds=[];const dys=[];const dxs=[];for(let i=0;i<n;i++){xs[i]=pathCoordinates[i*2];ys[i]=pathCoordinates[i*2+1]}for(let i1=0;i1<n-1;i1++){dys[i1]=ys[i1+1]-ys[i1];dxs[i1]=xs[i1+1]-xs[i1];ds[i1]=dys[i1]/dxs[i1]}ms[0]=ds[0];ms[n-1]=ds[n-2];for(let i2=1;i2<n-1;i2++){if(ds[i2]===0||ds[i2-1]===0||ds[i2-1]>0!==ds[i2]>0){ms[i2]=0}else{ms[i2]=3*(dxs[i2-1]+dxs[i2])/((2*dxs[i2]+dxs[i2-1])/ds[i2-1]+(dxs[i2]+2*dxs[i2-1])/ds[i2]);if(!isFinite(ms[i2])){ms[i2]=0}}}const path=(new SvgPath).move(xs[0],ys[0],false,valueData[0]);for(let i3=0;i3<n-1;i3++){path.curve(xs[i3]+dxs[i3]/3,ys[i3]+ms[i3]*dxs[i3]/3,xs[i3+1]-dxs[i3]/3,ys[i3+1]-ms[i3+1]*dxs[i3]/3,xs[i3+1],ys[i3+1],false,valueData[i3+1])}return path}}}var EventEmitter=class{on(event,listener){const{allListeners,listeners}=this;if(event==="*"){allListeners.add(listener)}else{if(!listeners.has(event)){listeners.set(event,new Set)}listeners.get(event).add(listener)}}off(event,listener){const{allListeners,listeners}=this;if(event==="*"){if(listener){allListeners.delete(listener)}else{allListeners.clear()}}else if(listeners.has(event)){const eventListeners=listeners.get(event);if(listener){eventListeners.delete(listener)}else{eventListeners.clear()}if(!eventListeners.size){listeners.delete(event)}}}emit(event,data){const{allListeners,listeners}=this;if(listeners.has(event)){listeners.get(event).forEach(listener=>listener(data))}allListeners.forEach(listener=>listener(event,data))}constructor(){this.listeners=new Map;this.allListeners=new Set}};var instances=new WeakMap;var BaseChart=class{update(data,options){let override=arguments.length>2&&arguments[2]!==void 0?arguments[2]:false;if(data){this.data=data||{};this.data.labels=this.data.labels||[];this.data.series=this.data.series||[];this.eventEmitter.emit("data",{type:"update",data:this.data})}if(options){this.options=extend({},override?this.options:this.defaultOptions,options);if(!this.initializeTimeoutId){var ref;(ref=this.optionsProvider)===null||ref===void 0?void 0:ref.removeMediaQueryListeners();this.optionsProvider=optionsProvider(this.options,this.responsiveOptions,this.eventEmitter)}}if(!this.initializeTimeoutId&&this.optionsProvider){this.createChart(this.optionsProvider.getCurrentOptions())}return this}detach(){if(!this.initializeTimeoutId){var ref;window.removeEventListener("resize",this.resizeListener);(ref=this.optionsProvider)===null||ref===void 0?void 0:ref.removeMediaQueryListeners()}else{window.clearTimeout(this.initializeTimeoutId)}instances.delete(this.container);return this}on(event,listener){this.eventEmitter.on(event,listener);return this}off(event,listener){this.eventEmitter.off(event,listener);return this}initialize(){window.addEventListener("resize",this.resizeListener);this.optionsProvider=optionsProvider(this.options,this.responsiveOptions,this.eventEmitter);this.eventEmitter.on("optionsChanged",()=>this.update());if(this.options.plugins){this.options.plugins.forEach(plugin=>{if(Array.isArray(plugin)){plugin[0](this,plugin[1])}else{plugin(this)}})}this.eventEmitter.emit("data",{type:"initial",data:this.data});this.createChart(this.optionsProvider.getCurrentOptions());this.initializeTimeoutId=null}constructor(query,data,defaultOptions,options,responsiveOptions){this.data=data;this.defaultOptions=defaultOptions;this.options=options;this.responsiveOptions=responsiveOptions;this.eventEmitter=new EventEmitter;this.resizeListener=()=>this.update();this.initializeTimeoutId=setTimeout(()=>this.initialize(),0);const container=typeof query==="string"?document.querySelector(query):query;if(!container){throw new Error("Target element is not found")}this.container=container;const prevInstance=instances.get(container);if(prevInstance){prevInstance.detach()}instances.set(container,this)}};var axisUnits={x:{pos:"x",len:"width",dir:"horizontal",rectStart:"x1",rectEnd:"x2",rectOffset:"y2"},y:{pos:"y",len:"height",dir:"vertical",rectStart:"y2",rectEnd:"y1",rectOffset:"x1"}};var Axis=class{createGridAndLabels(gridGroup,labelGroup,chartOptions,eventEmitter){const axisOptions=this.units.pos==="x"?chartOptions.axisX:chartOptions.axisY;const projectedValues=this.ticks.map((tick,i)=>this.projectValue(tick,i));const labelValues=this.ticks.map(axisOptions.labelInterpolationFnc);projectedValues.forEach((projectedValue,index)=>{const labelValue=labelValues[index];const labelOffset={x:0,y:0};let labelLength;if(projectedValues[index+1]){labelLength=projectedValues[index+1]-projectedValue}else{labelLength=Math.max(this.axisLength-projectedValue,this.axisLength/this.ticks.length)}if(labelValue!==""&&isFalseyButZero(labelValue)){return}if(this.units.pos==="x"){projectedValue=this.chartRect.x1+projectedValue;labelOffset.x=chartOptions.axisX.labelOffset.x;if(chartOptions.axisX.position==="start"){labelOffset.y=this.chartRect.padding.top+chartOptions.axisX.labelOffset.y+5}else{labelOffset.y=this.chartRect.y1+chartOptions.axisX.labelOffset.y+5}}else{projectedValue=this.chartRect.y1-projectedValue;labelOffset.y=chartOptions.axisY.labelOffset.y-labelLength;if(chartOptions.axisY.position==="start"){labelOffset.x=this.chartRect.padding.left+chartOptions.axisY.labelOffset.x}else{labelOffset.x=this.chartRect.x2+chartOptions.axisY.labelOffset.x+10}}if(axisOptions.showGrid){createGrid(projectedValue,index,this,this.gridOffset,this.chartRect[this.counterUnits.len](),gridGroup,[chartOptions.classNames.grid,chartOptions.classNames[this.units.dir]],eventEmitter)}if(axisOptions.showLabel){createLabel(projectedValue,labelLength,index,labelValue,this,axisOptions.offset,labelOffset,labelGroup,[chartOptions.classNames.label,chartOptions.classNames[this.units.dir],axisOptions.position==="start"?chartOptions.classNames[axisOptions.position]:chartOptions.classNames.end],eventEmitter)}})}constructor(units,chartRect,ticks){this.units=units;this.chartRect=chartRect;this.ticks=ticks;this.counterUnits=units===axisUnits.x?axisUnits.y:axisUnits.x;this.axisLength=chartRect[this.units.rectEnd]-chartRect[this.units.rectStart];this.gridOffset=chartRect[this.units.rectOffset]}};var AutoScaleAxis=class extends Axis{projectValue(value){const finalValue=Number(getMultiValue(value,this.units.pos));return this.axisLength*(finalValue-this.bounds.min)/this.bounds.range}constructor(axisUnit,data,chartRect,options){const highLow=options.highLow||getHighLow(data,options,axisUnit.pos);const bounds=getBounds(chartRect[axisUnit.rectEnd]-chartRect[axisUnit.rectStart],highLow,options.scaleMinSpace||20,options.onlyInteger);const range={min:bounds.min,max:bounds.max};super(axisUnit,chartRect,bounds.values);this.bounds=bounds;this.range=range}};var StepAxis=class extends Axis{projectValue(_value,index){return this.stepLength*index}constructor(axisUnit,_data,chartRect,options){const ticks=options.ticks||[];super(axisUnit,chartRect,ticks);const calc=Math.max(1,ticks.length-(options.stretch?1:0));this.stepLength=this.axisLength/calc;this.stretch=Boolean(options.stretch)}};function getSeriesOption(series,options,key){var ref;if(safeHasProperty(series,"name")&&series.name&&((ref=options.series)===null||ref===void 0?void 0:ref[series.name])){const seriesOptions=options===null||options===void 0?void 0:options.series[series.name];const value=seriesOptions[key];const result=value===void 0?options[key]:value;return result}else{return options[key]}}var defaultOptions$2={axisX:{offset:30,position:"end",labelOffset:{x:0,y:0},showLabel:true,showGrid:true,labelInterpolationFnc:noop,type:void 0},axisY:{offset:40,position:"start",labelOffset:{x:0,y:0},showLabel:true,showGrid:true,labelInterpolationFnc:noop,type:void 0,scaleMinSpace:20,onlyInteger:false},width:void 0,height:void 0,showLine:true,showPoint:true,showArea:false,areaBase:0,lineSmooth:true,showGridBackground:false,low:void 0,high:void 0,chartPadding:{top:15,right:15,bottom:5,left:10},fullWidth:false,reverseData:false,classNames:{chart:"ct-chart-line",label:"ct-label",labelGroup:"ct-labels",series:"ct-series",line:"ct-line",point:"ct-point",area:"ct-area",grid:"ct-grid",gridGroup:"ct-grids",gridBackground:"ct-grid-background",vertical:"ct-vertical",horizontal:"ct-horizontal",start:"ct-start",end:"ct-end"}};var LineChart=class extends BaseChart{createChart(options){const{data}=this;const normalizedData=normalizeData(data,options.reverseData,true);const svg=createSvg(this.container,options.width,options.height,options.classNames.chart);this.svg=svg;const gridGroup=svg.elem("g").addClass(options.classNames.gridGroup);const seriesGroup=svg.elem("g");const labelGroup=svg.elem("g").addClass(options.classNames.labelGroup);const chartRect=createChartRect(svg,options);let axisX;let axisY;if(options.axisX.type===void 0){axisX=new StepAxis(axisUnits.x,normalizedData.series,chartRect,{...options.axisX,ticks:normalizedData.labels,stretch:options.fullWidth})}else{axisX=new options.axisX.type(axisUnits.x,normalizedData.series,chartRect,options.axisX)}if(options.axisY.type===void 0){axisY=new AutoScaleAxis(axisUnits.y,normalizedData.series,chartRect,{...options.axisY,high:isNumeric(options.high)?options.high:options.axisY.high,low:isNumeric(options.low)?options.low:options.axisY.low})}else{axisY=new options.axisY.type(axisUnits.y,normalizedData.series,chartRect,options.axisY)}axisX.createGridAndLabels(gridGroup,labelGroup,options,this.eventEmitter);axisY.createGridAndLabels(gridGroup,labelGroup,options,this.eventEmitter);if(options.showGridBackground){createGridBackground(gridGroup,chartRect,options.classNames.gridBackground,this.eventEmitter)}each(data.series,(series,seriesIndex)=>{const seriesElement=seriesGroup.elem("g");const seriesName=safeHasProperty(series,"name")&&series.name;const seriesClassName=safeHasProperty(series,"className")&&series.className;const seriesMeta=safeHasProperty(series,"meta")?series.meta:void 0;if(seriesName){seriesElement.attr({"ct:series-name":seriesName})}if(seriesMeta){seriesElement.attr({"ct:meta":serialize(seriesMeta)})}seriesElement.addClass([options.classNames.series,seriesClassName||"".concat(options.classNames.series,"-").concat(alphaNumerate(seriesIndex))].join(" "));const pathCoordinates=[];const pathData=[];normalizedData.series[seriesIndex].forEach((value,valueIndex)=>{const p={x:chartRect.x1+axisX.projectValue(value,valueIndex,normalizedData.series[seriesIndex]),y:chartRect.y1-axisY.projectValue(value,valueIndex,normalizedData.series[seriesIndex])};pathCoordinates.push(p.x,p.y);pathData.push({value:value,valueIndex:valueIndex,meta:getMetaData(series,valueIndex)})});const seriesOptions={lineSmooth:getSeriesOption(series,options,"lineSmooth"),showPoint:getSeriesOption(series,options,"showPoint"),showLine:getSeriesOption(series,options,"showLine"),showArea:getSeriesOption(series,options,"showArea"),areaBase:getSeriesOption(series,options,"areaBase")};let smoothing;if(typeof seriesOptions.lineSmooth==="function"){smoothing=seriesOptions.lineSmooth}else{smoothing=seriesOptions.lineSmooth?monotoneCubic():none()}const path=smoothing(pathCoordinates,pathData);if(seriesOptions.showPoint){path.pathElements.forEach(pathElement=>{const{data:pathElementData}=pathElement;const point=seriesElement.elem("line",{x1:pathElement.x,y1:pathElement.y,x2:pathElement.x+.01,y2:pathElement.y},options.classNames.point);if(pathElementData){let x;let y;if(safeHasProperty(pathElementData.value,"x")){x=pathElementData.value.x}if(safeHasProperty(pathElementData.value,"y")){y=pathElementData.value.y}point.attr({"ct:value":[x,y].filter(isNumeric).join(","),"ct:meta":serialize(pathElementData.meta)})}this.eventEmitter.emit("draw",{type:"point",value:pathElementData===null||pathElementData===void 0?void 0:pathElementData.value,index:(pathElementData===null||pathElementData===void 0?void 0:pathElementData.valueIndex)||0,meta:pathElementData===null||pathElementData===void 0?void 0:pathElementData.meta,series:series,seriesIndex:seriesIndex,axisX:axisX,axisY:axisY,group:seriesElement,element:point,x:pathElement.x,y:pathElement.y,chartRect:chartRect})})}if(seriesOptions.showLine){const line=seriesElement.elem("path",{d:path.stringify()},options.classNames.line,true);this.eventEmitter.emit("draw",{type:"line",values:normalizedData.series[seriesIndex],path:path.clone(),chartRect:chartRect,index:seriesIndex,series:series,seriesIndex:seriesIndex,meta:seriesMeta,axisX:axisX,axisY:axisY,group:seriesElement,element:line})}if(seriesOptions.showArea&&axisY.range){const areaBase=Math.max(Math.min(seriesOptions.areaBase,axisY.range.max),axisY.range.min);const areaBaseProjected=chartRect.y1-axisY.projectValue(areaBase);path.splitByCommand("M").filter(pathSegment=>pathSegment.pathElements.length>1).map(solidPathSegments=>{const firstElement=solidPathSegments.pathElements[0];const lastElement=solidPathSegments.pathElements[solidPathSegments.pathElements.length-1];return solidPathSegments.clone(true).position(0).remove(1).move(firstElement.x,areaBaseProjected).line(firstElement.x,firstElement.y).position(solidPathSegments.pathElements.length+1).line(lastElement.x,areaBaseProjected)}).forEach(areaPath=>{const area=seriesElement.elem("path",{d:areaPath.stringify()},options.classNames.area,true);this.eventEmitter.emit("draw",{type:"area",values:normalizedData.series[seriesIndex],path:areaPath.clone(),series:series,seriesIndex:seriesIndex,axisX:axisX,axisY:axisY,chartRect:chartRect,index:seriesIndex,group:seriesElement,element:area,meta:seriesMeta})})}},options.reverseData);this.eventEmitter.emit("created",{chartRect:chartRect,axisX:axisX,axisY:axisY,svg:svg,options:options})}constructor(query,data,options,responsiveOptions){super(query,data,defaultOptions$2,extend({},defaultOptions$2,options),responsiveOptions);this.data=data}};function getSerialSums(series){return serialMap(series,function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return Array.from(args).reduce((prev,curr)=>{return{x:prev.x+(safeHasProperty(curr,"x")?curr.x:0),y:prev.y+(safeHasProperty(curr,"y")?curr.y:0)}},{x:0,y:0})})}var defaultOptions$1={axisX:{offset:30,position:"end",labelOffset:{x:0,y:0},showLabel:true,showGrid:true,labelInterpolationFnc:noop,scaleMinSpace:30,onlyInteger:false},axisY:{offset:40,position:"start",labelOffset:{x:0,y:0},showLabel:true,showGrid:true,labelInterpolationFnc:noop,scaleMinSpace:20,onlyInteger:false},width:void 0,height:void 0,high:void 0,low:void 0,referenceValue:0,chartPadding:{top:15,right:15,bottom:5,left:10},seriesBarDistance:15,stackBars:false,stackMode:"accumulate",horizontalBars:false,distributeSeries:false,reverseData:false,showGridBackground:false,classNames:{chart:"ct-chart-bar",horizontalBars:"ct-horizontal-bars",label:"ct-label",labelGroup:"ct-labels",series:"ct-series",bar:"ct-bar",grid:"ct-grid",gridGroup:"ct-grids",gridBackground:"ct-grid-background",vertical:"ct-vertical",horizontal:"ct-horizontal",start:"ct-start",end:"ct-end"}};var BarChart=class extends BaseChart{createChart(options){const{data}=this;const normalizedData=normalizeData(data,options.reverseData,options.horizontalBars?"x":"y",true);const svg=createSvg(this.container,options.width,options.height,options.classNames.chart+(options.horizontalBars?" "+options.classNames.horizontalBars:""));const highLow=options.stackBars&&options.stackMode!==true&&normalizedData.series.length?getHighLow([getSerialSums(normalizedData.series)],options,options.horizontalBars?"x":"y"):getHighLow(normalizedData.series,options,options.horizontalBars?"x":"y");this.svg=svg;const gridGroup=svg.elem("g").addClass(options.classNames.gridGroup);const seriesGroup=svg.elem("g");const labelGroup=svg.elem("g").addClass(options.classNames.labelGroup);if(typeof options.high==="number"){highLow.high=options.high}if(typeof options.low==="number"){highLow.low=options.low}const chartRect=createChartRect(svg,options);let valueAxis;const labelAxisTicks=options.distributeSeries&&options.stackBars?normalizedData.labels.slice(0,1):normalizedData.labels;let labelAxis;let axisX;let axisY;if(options.horizontalBars){if(options.axisX.type===void 0){valueAxis=axisX=new AutoScaleAxis(axisUnits.x,normalizedData.series,chartRect,{...options.axisX,highLow:highLow,referenceValue:0})}else{valueAxis=axisX=new options.axisX.type(axisUnits.x,normalizedData.series,chartRect,{...options.axisX,highLow:highLow,referenceValue:0})}if(options.axisY.type===void 0){labelAxis=axisY=new StepAxis(axisUnits.y,normalizedData.series,chartRect,{ticks:labelAxisTicks})}else{labelAxis=axisY=new options.axisY.type(axisUnits.y,normalizedData.series,chartRect,options.axisY)}}else{if(options.axisX.type===void 0){labelAxis=axisX=new StepAxis(axisUnits.x,normalizedData.series,chartRect,{ticks:labelAxisTicks})}else{labelAxis=axisX=new options.axisX.type(axisUnits.x,normalizedData.series,chartRect,options.axisX)}if(options.axisY.type===void 0){valueAxis=axisY=new AutoScaleAxis(axisUnits.y,normalizedData.series,chartRect,{...options.axisY,highLow:highLow,referenceValue:0})}else{valueAxis=axisY=new options.axisY.type(axisUnits.y,normalizedData.series,chartRect,{...options.axisY,highLow:highLow,referenceValue:0})}}const zeroPoint=options.horizontalBars?chartRect.x1+valueAxis.projectValue(0):chartRect.y1-valueAxis.projectValue(0);const isAccumulateStackMode=options.stackMode==="accumulate";const isAccumulateRelativeStackMode=options.stackMode==="accumulate-relative";const posStackedBarValues=[];const negStackedBarValues=[];let stackedBarValues=posStackedBarValues;labelAxis.createGridAndLabels(gridGroup,labelGroup,options,this.eventEmitter);valueAxis.createGridAndLabels(gridGroup,labelGroup,options,this.eventEmitter);if(options.showGridBackground){createGridBackground(gridGroup,chartRect,options.classNames.gridBackground,this.eventEmitter)}each(data.series,(series,seriesIndex)=>{const biPol=seriesIndex-(data.series.length-1)/2;let periodHalfLength;if(options.distributeSeries&&!options.stackBars){periodHalfLength=labelAxis.axisLength/normalizedData.series.length/2}else if(options.distributeSeries&&options.stackBars){periodHalfLength=labelAxis.axisLength/2}else{periodHalfLength=labelAxis.axisLength/normalizedData.series[seriesIndex].length/2}const seriesElement=seriesGroup.elem("g");const seriesName=safeHasProperty(series,"name")&&series.name;const seriesClassName=safeHasProperty(series,"className")&&series.className;const seriesMeta=safeHasProperty(series,"meta")?series.meta:void 0;if(seriesName){seriesElement.attr({"ct:series-name":seriesName})}if(seriesMeta){seriesElement.attr({"ct:meta":serialize(seriesMeta)})}seriesElement.addClass([options.classNames.series,seriesClassName||"".concat(options.classNames.series,"-").concat(alphaNumerate(seriesIndex))].join(" "));normalizedData.series[seriesIndex].forEach((value,valueIndex)=>{const valueX=safeHasProperty(value,"x")&&value.x;const valueY=safeHasProperty(value,"y")&&value.y;let labelAxisValueIndex;if(options.distributeSeries&&!options.stackBars){labelAxisValueIndex=seriesIndex}else if(options.distributeSeries&&options.stackBars){labelAxisValueIndex=0}else{labelAxisValueIndex=valueIndex}let projected;if(options.horizontalBars){projected={x:chartRect.x1+valueAxis.projectValue(valueX||0,valueIndex,normalizedData.series[seriesIndex]),y:chartRect.y1-labelAxis.projectValue(valueY||0,labelAxisValueIndex,normalizedData.series[seriesIndex])}}else{projected={x:chartRect.x1+labelAxis.projectValue(valueX||0,labelAxisValueIndex,normalizedData.series[seriesIndex]),y:chartRect.y1-valueAxis.projectValue(valueY||0,valueIndex,normalizedData.series[seriesIndex])}}if(labelAxis instanceof StepAxis){if(!labelAxis.stretch){projected[labelAxis.units.pos]+=periodHalfLength*(options.horizontalBars?-1:1)}projected[labelAxis.units.pos]+=options.stackBars||options.distributeSeries?0:biPol*options.seriesBarDistance*(options.horizontalBars?-1:1)}if(isAccumulateRelativeStackMode){stackedBarValues=valueY>=0||valueX>=0?posStackedBarValues:negStackedBarValues}const previousStack=stackedBarValues[valueIndex]||zeroPoint;stackedBarValues[valueIndex]=previousStack-(zeroPoint-projected[labelAxis.counterUnits.pos]);if(value===void 0){return}const positions={["".concat(labelAxis.units.pos,"1")]:projected[labelAxis.units.pos],["".concat(labelAxis.units.pos,"2")]:projected[labelAxis.units.pos]};if(options.stackBars&&(isAccumulateStackMode||isAccumulateRelativeStackMode||!options.stackMode)){positions["".concat(labelAxis.counterUnits.pos,"1")]=previousStack;positions["".concat(labelAxis.counterUnits.pos,"2")]=stackedBarValues[valueIndex]}else{positions["".concat(labelAxis.counterUnits.pos,"1")]=zeroPoint;positions["".concat(labelAxis.counterUnits.pos,"2")]=projected[labelAxis.counterUnits.pos]}positions.x1=Math.min(Math.max(positions.x1,chartRect.x1),chartRect.x2);positions.x2=Math.min(Math.max(positions.x2,chartRect.x1),chartRect.x2);positions.y1=Math.min(Math.max(positions.y1,chartRect.y2),chartRect.y1);positions.y2=Math.min(Math.max(positions.y2,chartRect.y2),chartRect.y1);const metaData=getMetaData(series,valueIndex);const bar=seriesElement.elem("line",positions,options.classNames.bar).attr({"ct:value":[valueX,valueY].filter(isNumeric).join(","),"ct:meta":serialize(metaData)});this.eventEmitter.emit("draw",{type:"bar",value:value,index:valueIndex,meta:metaData,series:series,seriesIndex:seriesIndex,axisX:axisX,axisY:axisY,chartRect:chartRect,group:seriesElement,element:bar,...positions})})},options.reverseData);this.eventEmitter.emit("created",{chartRect:chartRect,axisX:axisX,axisY:axisY,svg:svg,options:options})}constructor(query,data,options,responsiveOptions){super(query,data,defaultOptions$1,extend({},defaultOptions$1,options),responsiveOptions);this.data=data}};var css_str=`.ct-label{fill:rgba(0,0,0,.4);color:rgba(0,0,0,.4);font-size:.75rem;line-height:1}.ct-chart-bar .ct-label,.ct-chart-line .ct-label{display:flex}.ct-chart-donut .ct-label,.ct-chart-pie .ct-label{dominant-baseline:central}.ct-label.ct-horizontal.ct-start{align-items:flex-end;justify-content:flex-start;text-align:left}.ct-label.ct-horizontal.ct-end{align-items:flex-start;justify-content:flex-start;text-align:left}.ct-label.ct-vertical.ct-start{align-items:flex-end;justify-content:flex-end;text-align:right}.ct-label.ct-vertical.ct-end{align-items:flex-end;justify-content:flex-start;text-align:left}.ct-chart-bar .ct-label.ct-horizontal.ct-start{align-items:flex-end;justify-content:center;text-align:center}.ct-chart-bar .ct-label.ct-horizontal.ct-end{align-items:flex-start;justify-content:center;text-align:center}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-start{align-items:flex-end;justify-content:flex-start;text-align:left}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-end{align-items:flex-start;justify-content:flex-start;text-align:left}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-start{align-items:center;justify-content:flex-end;text-align:right}.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-end{align-items:center;justify-content:flex-start;text-align:left}.ct-grid{stroke:rgba(0,0,0,.2);stroke-width:1px;stroke-dasharray:2px}.ct-grid-background{fill:none}.ct-point{stroke-width:10px;stroke-linecap:round}.ct-line{fill:none;stroke-width:4px}.ct-area{stroke:none;fill-opacity:.1}.ct-bar{fill:none;stroke-width:10px}.ct-slice-donut{fill:none;stroke-width:60px}.ct-series-a .ct-bar,.ct-series-a .ct-line,.ct-series-a .ct-point,.ct-series-a .ct-slice-donut{stroke:#d70206}.ct-series-a .ct-area,.ct-series-a .ct-slice-pie{fill:#d70206}.ct-series-b .ct-bar,.ct-series-b .ct-line,.ct-series-b .ct-point,.ct-series-b .ct-slice-donut{stroke:#f05b4f}.ct-series-b .ct-area,.ct-series-b .ct-slice-pie{fill:#f05b4f}.ct-series-c .ct-bar,.ct-series-c .ct-line,.ct-series-c .ct-point,.ct-series-c .ct-slice-donut{stroke:#f4c63d}.ct-series-c .ct-area,.ct-series-c .ct-slice-pie{fill:#f4c63d}.ct-series-d .ct-bar,.ct-series-d .ct-line,.ct-series-d .ct-point,.ct-series-d .ct-slice-donut{stroke:#d17905}.ct-series-d .ct-area,.ct-series-d .ct-slice-pie{fill:#d17905}.ct-series-e .ct-bar,.ct-series-e .ct-line,.ct-series-e .ct-point,.ct-series-e .ct-slice-donut{stroke:#453d3f}.ct-series-e .ct-area,.ct-series-e .ct-slice-pie{fill:#453d3f}.ct-series-f .ct-bar,.ct-series-f .ct-line,.ct-series-f .ct-point,.ct-series-f .ct-slice-donut{stroke:#59922b}.ct-series-f .ct-area,.ct-series-f .ct-slice-pie{fill:#59922b}.ct-series-g .ct-bar,.ct-series-g .ct-line,.ct-series-g .ct-point,.ct-series-g .ct-slice-donut{stroke:#0544d3}.ct-series-g .ct-area,.ct-series-g .ct-slice-pie{fill:#0544d3}.ct-series-h .ct-bar,.ct-series-h .ct-line,.ct-series-h .ct-point,.ct-series-h .ct-slice-donut{stroke:#6b0392}.ct-series-h .ct-area,.ct-series-h .ct-slice-pie{fill:#6b0392}.ct-series-i .ct-bar,.ct-series-i .ct-line,.ct-series-i .ct-point,.ct-series-i .ct-slice-donut{stroke:#e6805e}.ct-series-i .ct-area,.ct-series-i .ct-slice-pie{fill:#e6805e}.ct-series-j .ct-bar,.ct-series-j .ct-line,.ct-series-j .ct-point,.ct-series-j .ct-slice-donut{stroke:#dda458}.ct-series-j .ct-area,.ct-series-j .ct-slice-pie{fill:#dda458}.ct-series-k .ct-bar,.ct-series-k .ct-line,.ct-series-k .ct-point,.ct-series-k .ct-slice-donut{stroke:#eacf7d}.ct-series-k .ct-area,.ct-series-k .ct-slice-pie{fill:#eacf7d}.ct-series-l .ct-bar,.ct-series-l .ct-line,.ct-series-l .ct-point,.ct-series-l .ct-slice-donut{stroke:#86797d}.ct-series-l .ct-area,.ct-series-l .ct-slice-pie{fill:#86797d}.ct-series-m .ct-bar,.ct-series-m .ct-line,.ct-series-m .ct-point,.ct-series-m .ct-slice-donut{stroke:#b2c326}.ct-series-m .ct-area,.ct-series-m .ct-slice-pie{fill:#b2c326}.ct-series-n .ct-bar,.ct-series-n .ct-line,.ct-series-n .ct-point,.ct-series-n .ct-slice-donut{stroke:#6188e2}.ct-series-n .ct-area,.ct-series-n .ct-slice-pie{fill:#6188e2}.ct-series-o .ct-bar,.ct-series-o .ct-line,.ct-series-o .ct-point,.ct-series-o .ct-slice-donut{stroke:#a748ca}.ct-series-o .ct-area,.ct-series-o .ct-slice-pie{fill:#a748ca}.ct-square{display:block;position:relative;width:100%}.ct-square:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:100%}.ct-square:after{content:"";display:table;clear:both}.ct-square>svg{display:block;position:absolute;top:0;left:0}.ct-minor-second{display:block;position:relative;width:100%}.ct-minor-second:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:93.75%}.ct-minor-second:after{content:"";display:table;clear:both}.ct-minor-second>svg{display:block;position:absolute;top:0;left:0}.ct-major-second{display:block;position:relative;width:100%}.ct-major-second:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:88.8888888889%}.ct-major-second:after{content:"";display:table;clear:both}.ct-major-second>svg{display:block;position:absolute;top:0;left:0}.ct-minor-third{display:block;position:relative;width:100%}.ct-minor-third:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:83.3333333333%}.ct-minor-third:after{content:"";display:table;clear:both}.ct-minor-third>svg{display:block;position:absolute;top:0;left:0}.ct-major-third{display:block;position:relative;width:100%}.ct-major-third:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:80%}.ct-major-third:after{content:"";display:table;clear:both}.ct-major-third>svg{display:block;position:absolute;top:0;left:0}.ct-perfect-fourth{display:block;position:relative;width:100%}.ct-perfect-fourth:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:75%}.ct-perfect-fourth:after{content:"";display:table;clear:both}.ct-perfect-fourth>svg{display:block;position:absolute;top:0;left:0}.ct-perfect-fifth{display:block;position:relative;width:100%}.ct-perfect-fifth:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:66.6666666667%}.ct-perfect-fifth:after{content:"";display:table;clear:both}.ct-perfect-fifth>svg{display:block;position:absolute;top:0;left:0}.ct-minor-sixth{display:block;position:relative;width:100%}.ct-minor-sixth:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:62.5%}.ct-minor-sixth:after{content:"";display:table;clear:both}.ct-minor-sixth>svg{display:block;position:absolute;top:0;left:0}.ct-golden-section{display:block;position:relative;width:100%}.ct-golden-section:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:61.804697157%}.ct-golden-section:after{content:"";display:table;clear:both}.ct-golden-section>svg{display:block;position:absolute;top:0;left:0}.ct-major-sixth{display:block;position:relative;width:100%}.ct-major-sixth:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:60%}.ct-major-sixth:after{content:"";display:table;clear:both}.ct-major-sixth>svg{display:block;position:absolute;top:0;left:0}.ct-minor-seventh{display:block;position:relative;width:100%}.ct-minor-seventh:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:56.25%}.ct-minor-seventh:after{content:"";display:table;clear:both}.ct-minor-seventh>svg{display:block;position:absolute;top:0;left:0}.ct-major-seventh{display:block;position:relative;width:100%}.ct-major-seventh:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:53.3333333333%}.ct-major-seventh:after{content:"";display:table;clear:both}.ct-major-seventh>svg{display:block;position:absolute;top:0;left:0}.ct-octave{display:block;position:relative;width:100%}.ct-octave:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:50%}.ct-octave:after{content:"";display:table;clear:both}.ct-octave>svg{display:block;position:absolute;top:0;left:0}.ct-major-tenth{display:block;position:relative;width:100%}.ct-major-tenth:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:40%}.ct-major-tenth:after{content:"";display:table;clear:both}.ct-major-tenth>svg{display:block;position:absolute;top:0;left:0}.ct-major-eleventh{display:block;position:relative;width:100%}.ct-major-eleventh:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:37.5%}.ct-major-eleventh:after{content:"";display:table;clear:both}.ct-major-eleventh>svg{display:block;position:absolute;top:0;left:0}.ct-major-twelfth{display:block;position:relative;width:100%}.ct-major-twelfth:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:33.3333333333%}.ct-major-twelfth:after{content:"";display:table;clear:both}.ct-major-twelfth>svg{display:block;position:absolute;top:0;left:0}.ct-double-octave{display:block;position:relative;width:100%}.ct-double-octave:before{display:block;float:left;content:"";width:0;height:0;padding-bottom:25%}.ct-double-octave:after{content:"";display:table;clear:both}.ct-double-octave>svg{display:block;position:absolute;top:0;left:0}`;document.head.insertAdjacentHTML("beforeend",`<style>${css_str}</style>`);window.Chartist_LineChart=LineChart;window.Chartist_BarChart=BarChart})();